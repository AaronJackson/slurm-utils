#!/bin/bash

set -u

######################################################################
# Copyright 2019 Aaron S. Jackson <asj@cs.nott.ac.uk>
#                University of Nottingham
#
# This script shows the number of single, pairs, triplets and quads of
# GPUs available per Slurm partition. This is useful to users for
# diagnosing why their job hasn't started.
#
# For each partition, it also displays the QoS which are allowed to
# submit jobs to that partition.

GRES=gpu
MIN_CPU=0
MIN_RAM=0

while getopts ":cghn:m:" opt ; do
    case ${opt} in
	c)
	    GRES=cpu
	    ;;

	g)
	    GRES=gpu
	    ;;

	n)
	    MIN_CPU=$OPTARG
	    ;;

	m)
	    MIN_RAM=$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]')
	    MIN_RAM=$(numfmt --from=iec "$MIN_RAM")
	    ;;

	h)
	    echo "clusterfree"
	    echo "Released under the GNU GPL."
	    echo
	    echo "Copyright 2019 Aaron S. Jackson <asj@cs.nott.ac.uk>"
	    echo "               University of Nottingham"
	    echo
	    echo "DESCRIPION:"
	    echo "  This scripts shows the number of available GPUs (I)"
	    echo "  along with the number of pairs (II), triplets (II)"
	    echo "  and quads (IV) available on any single node"
	    echo
	    echo "ARGUMENTS:"
	    echo " -g      Show available GPUs (default)."
	    echo " -c      Show available CPUs."
	    echo
	    echo " -n X    Given X CPUs are available."
	    echo " -m X    Given M bytes of RAM available (suffix K, M, G, etc)"
	    exit
	    ;;

	*)
	    echo "Use -h for help"
	    exit
	    ;;
    esac
done

gregex='s/.*gpu=\([0-9]\).*/\1/p'
cregex='s/.*cpu=\([0-9]*\).*/\1/p'
mregex='s/.*mem=\([0-9]*[KMGT]\).*/\1/pi'

p=$(while IFS='=' read -r _ partition ; do
	IFS='=' read -r _ nodes
	echo "$partition $nodes"
    done < <(scontrol show part | \
		 grep -e PartitionName -e ' Nodes'))

n=$(while read -r node ; do
	read -r state
	read -r avail
	read -r alloc
	node=$(echo "$node" | tr '=' ' ' | awk '{ print $2 }')

	state=$(echo "$state" | sed -n 's/.*State=\([A-Z+]*\).*/\1/p')
	gavail=$(echo "$avail" | sed -n "$gregex")
	galloc=$(echo "$alloc" | sed -n "$gregex")
	cavail=$(echo "$avail" | sed -n "$cregex")
	calloc=$(echo "$alloc" | sed -n "$cregex")
	mavail=$(echo "$avail" | sed -n "$mregex" | numfmt --from=iec)
	malloc=$(echo "$alloc" | sed -n "$mregex" | numfmt --from=iec)

	if [ "$state" = "DOWN" ] || [[ "$state" == *"DRAIN"* ]] ||
	       [ $(( cavail - ${calloc:-0} )) -lt "$MIN_CPU" ] ||
	       [ $(( mavail - ${malloc:-0} )) -lt "$MIN_RAM" ] ; then
	    continue
	fi


	if [ "$GRES" == "gpu" ] ; then
	    alloc=$galloc; avail=$gavail;
	elif [ "$GRES" == "cpu" ] ; then
	    alloc=$calloc; avail=$cavail;
	fi
	echo "$node ${avail:-0} ${alloc:-0}"
    done < <(scontrol show nodes | \
		 grep -e NodeName -e TRES -e State))

qos=$(scontrol show -o partition | \
    sed 's/PartitionName=\([a-z]*\).*AllowQos=\([a-z,]*\).*/\1\t\2/' | \
    tr ',' ' ')

(
    echo "+,+,,+,,+,,,,+,,+"
    echo "|,|,# $GRES,|,I,|,II,III,IV,|,Allowed QoS,|"
    echo "+,+,,+,,+,,,,+,,+"
    while read -r name nodes ; do
	echo -n "|$name,|,"
	pn=$(while read -r node ; do
		 echo "$n" | grep "$node"
	     done < <(echo "$nodes" | tr ',' '\n'))

	avail=$(echo "$pn" | awk '{sum+=$2} END { print sum }')
	I=$(echo "$pn" | awk '{sum+=$2-$3} END { print sum }')
	II=$(echo "$pn" | awk '{sum+=int(($2 - $3)/2)} END { print sum }')
	III=$(echo "$pn" | awk '{sum+=int(($2 - $3)/3)} END { print sum }')
	IV=$(echo "$pn" | awk '{sum+=int(($2 - $3)/4)} END { print sum }')
	q=$(echo "$qos" | awk -F'\t' -v p="$name" '$1 == p { print $2 }')

	echo "$avail,|,$I,|,$II,$III,$IV,|,$q,|"
    done < <(echo "$p")
    echo "+,+,,+,,+,,,,+,,+"
) | column -t -s',' | sed '/+/s/ /-/g'
