#!/bin/bash

set -ue

######################################################################
# Copyright 2019 Aaron S. Jackson <asj@cs.nott.ac.uk>
#                University of Nottingham
#
# This script shows the number of single, pairs, triplets and quads of
# GPUs available per Slurm partition. This is useful to users for
# diagnosing why their job hasn't started.
#
# For each partition, it also displays the QoS which are allowed to
# submit jobs to that partition.

GRES=gpu
MIN_CPU=0
MIN_RAM=0
CONSTRAINT=

while getopts ":cghn:m:t:T" opt ; do
    case ${opt} in
	c)  # Show available CPUs
	    GRES=cpu
	    ;;

	g)  # Show available GPUs
	    GRES=gpu
	    ;;

	n)  # Only include nodes with X available CPUs
	    MIN_CPU=$OPTARG
	    ;;

	m)  # Only show nodes with X amount of available RAM
	    MIN_RAM=$(echo "${OPTARG^^}" | numfmt --from=iec "$MIN_RAM")
	    ;;

	t)  # Require a node feature
	    CONSTRAINT=$(echo "$OPTARG" | tr ',' '\n' | sort)
	    ;;

	T)  # List valid constraints for this cluster.
	    scontrol show node | \
		grep AvailableFeatures | \
		cut -d'=' -f2 | tr ',' '\n' | sort -u
	    exit
	    ;;

	h)  # Show some help
	    echo "clusterfree"
	    echo "Released under the GNU GPL."
	    echo
	    echo "Copyright 2019 Aaron S. Jackson <asj@cs.nott.ac.uk>"
	    echo "               University of Nottingham"
	    echo
	    echo "DESCRIPION:"
	    echo "  This scripts shows the number of available GPUs (I)"
	    echo "  along with the number of pairs (II), triplets (II)"
	    echo "  and quads (IV) available on any single node"
	    echo
	    echo "ARGUMENTS:"
	    echo "             Modifiers..."
	    echo " -g ............. Show available GPUs (default)."
	    echo " -c ............. Show available CPUs."
	    echo
	    echo "             Filter by..."
	    echo " -n X ........... X CPUs are available."
	    echo " -m X ........... X bytes of RAM available (with suffix)."
	    echo " -t features .... nodes of a features (command delimited)."
	    echo
	    echo "             Utilities..."
	    echo " -T ............. View a list of valid features"
	    echo
	    exit
	    ;;

	*)
	    echo "Use -h for help"
	    exit
	    ;;
    esac
done

# Get a list of partitions.
p=$(while IFS='=' read -r _ partition ; do
	IFS='=' read -r _ nodes
	echo "$partition $nodes"
    done < <(scontrol show part | \
		 grep -e PartitionName -e ' Nodes'))


# Get a list of nodes and dump availability info.
gregex='s/.*gpu=\([0-9]\).*/\1/p'          # GPUs
cregex='s/.*cpu=\([0-9]*\).*/\1/p'         # CPUs
mregex='s/.*mem=\([0-9]*[KMGT]\).*/\1/pi'  # RAM

n=$(while read -r node ; do
	read -r features
	read -r state
	read -r avail
	read -r alloc

	node=$(echo "$node" | tr '=' ' ' | awk '{ print $2 }')

	# Grab node stats
	features=$(echo "${features#*=}" | tr ',' '\n' | sort)
	state=$(echo "$state" | sed -n 's/.*State=\([A-Z+]*\).*/\1/p')
	gavail=$(echo "$avail" | sed -n "$gregex")
	galloc=$(echo "$alloc" | sed -n "$gregex")
	cavail=$(echo "$avail" | sed -n "$cregex")
	calloc=$(echo "$alloc" | sed -n "$cregex")
	mavail=$(echo "$avail" | sed -n "$mregex" | numfmt --from=iec)
	malloc=$(echo "$alloc" | sed -n "$mregex" | numfmt --from=iec)

	# Matching node features
	if [ -n "$CONSTRAINT" ] ; then
	    mfeat=$(comm -12 \
			 <(echo "$CONSTRAINT") \
			 <(echo "$features") | wc -l)
	    [[ $mfeat -eq 0 ]] && continue
	fi

	# Check the node is still a valid contender
	if [ "$state" = "DOWN" ] || [[ "$state" == *"DRAIN"* ]] ||
	       [ $(( cavail - ${calloc:-0} )) -lt "$MIN_CPU" ] ||
	       [ $(( mavail - ${malloc:-0} )) -lt "$MIN_RAM" ] ; then
	    continue
	fi

	if [ "$GRES" == "gpu" ] ; then
	    alloc=$galloc; avail=$gavail;
	elif [ "$GRES" == "cpu" ] ; then
	    alloc=$calloc; avail=$cavail;
	fi
	echo "$node ${avail:-0} ${alloc:-0}"
    done < <(scontrol show nodes | \
		 grep -e NodeName \
		      -e AvailableFeatures \
		      -e TRES -e State))

# Get a list of available QoS for each partition.
qos=$(scontrol show -o partition | \
          sed 's/PartitionName=\([a-z]*\).*AllowQos=\([a-z,]*\).*/\1\t\2/' | \
          tr ',' ' ')

(
    echo "+,+,+,,,,,+,+"
    echo "| Partition,| # ${GRES^^},|,I,II,III,IV,| QoS,|"
    echo "+,+,+,,,,,+,+"
    while read -r name nodes ; do
	pn=$(while read -r node ; do
		 (echo "$n" | grep "$node") || true
	     done < <(echo "$nodes" | tr ',' '\n'))

	avail=$(echo "$pn" | awk '{s+=$2} END { print s }')
	I=$(echo "$pn" | awk '{s+=$2-$3} END { print s }')
	II=$(echo "$pn" | awk '{s+=int(($2 - $3)/2)} END { print s }')
	III=$(echo "$pn" | awk '{s+=int(($2 - $3)/3)} END { print s }')
	IV=$(echo "$pn" | awk '{s+=int(($2 - $3)/4)} END { print s }')
	q=$(echo "$qos" | awk -F'\t' -v p="$name" \
			      '$1 == p { print $2 }')

	echo "| $name,| $avail,|,$I,$II,$III,$IV,| $q,|"
    done < <(echo "$p")
    echo "+,+,+,,,,,+,+"
) | column -t -s',' | sed '/^+/s/ /-/g'
